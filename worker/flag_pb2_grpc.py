# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import flag_pb2 as flag__pb2

GRPC_GENERATED_VERSION = '1.75.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in flag_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class FlagServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SetFlagAndGet = channel.unary_unary(
                '/flag.v1.FlagService/SetFlagAndGet',
                request_serializer=flag__pb2.FlagMutationRequest.SerializeToString,
                response_deserializer=flag__pb2.FlagState.FromString,
                _registered_method=True)


class FlagServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SetFlagAndGet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FlagServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SetFlagAndGet': grpc.unary_unary_rpc_method_handler(
                    servicer.SetFlagAndGet,
                    request_deserializer=flag__pb2.FlagMutationRequest.FromString,
                    response_serializer=flag__pb2.FlagState.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'flag.v1.FlagService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('flag.v1.FlagService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class FlagService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SetFlagAndGet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/flag.v1.FlagService/SetFlagAndGet',
            flag__pb2.FlagMutationRequest.SerializeToString,
            flag__pb2.FlagState.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class FlagControllerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SetAndRead = channel.unary_unary(
                '/flag.v1.FlagController/SetAndRead',
                request_serializer=flag__pb2.ControllerRequest.SerializeToString,
                response_deserializer=flag__pb2.ControllerResponse.FromString,
                _registered_method=True)


class FlagControllerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SetAndRead(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FlagControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SetAndRead': grpc.unary_unary_rpc_method_handler(
                    servicer.SetAndRead,
                    request_deserializer=flag__pb2.ControllerRequest.FromString,
                    response_serializer=flag__pb2.ControllerResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'flag.v1.FlagController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('flag.v1.FlagController', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class FlagController(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SetAndRead(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/flag.v1.FlagController/SetAndRead',
            flag__pb2.ControllerRequest.SerializeToString,
            flag__pb2.ControllerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class SqlServiceStub(object):
    """lives in the Python "app"
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Execute = channel.unary_stream(
                '/flag.v1.SqlService/Execute',
                request_serializer=flag__pb2.SqlRequest.SerializeToString,
                response_deserializer=flag__pb2.SqlChunk.FromString,
                _registered_method=True)


class SqlServiceServicer(object):
    """lives in the Python "app"
    """

    def Execute(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SqlServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Execute': grpc.unary_stream_rpc_method_handler(
                    servicer.Execute,
                    request_deserializer=flag__pb2.SqlRequest.FromString,
                    response_serializer=flag__pb2.SqlChunk.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'flag.v1.SqlService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('flag.v1.SqlService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class SqlService(object):
    """lives in the Python "app"
    """

    @staticmethod
    def Execute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/flag.v1.SqlService/Execute',
            flag__pb2.SqlRequest.SerializeToString,
            flag__pb2.SqlChunk.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class SqlControllerStub(object):
    """lives in the Python message-handler (proxy)
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Run = channel.unary_stream(
                '/flag.v1.SqlController/Run',
                request_serializer=flag__pb2.SqlRequest.SerializeToString,
                response_deserializer=flag__pb2.SqlChunk.FromString,
                _registered_method=True)


class SqlControllerServicer(object):
    """lives in the Python message-handler (proxy)
    """

    def Run(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SqlControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Run': grpc.unary_stream_rpc_method_handler(
                    servicer.Run,
                    request_deserializer=flag__pb2.SqlRequest.FromString,
                    response_serializer=flag__pb2.SqlChunk.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'flag.v1.SqlController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('flag.v1.SqlController', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class SqlController(object):
    """lives in the Python message-handler (proxy)
    """

    @staticmethod
    def Run(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/flag.v1.SqlController/Run',
            flag__pb2.SqlRequest.SerializeToString,
            flag__pb2.SqlChunk.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class JobServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Submit = channel.unary_unary(
                '/flag.v1.JobService/Submit',
                request_serializer=flag__pb2.SubmitJobRequest.SerializeToString,
                response_deserializer=flag__pb2.JobAck.FromString,
                _registered_method=True)
        self.GetStatus = channel.unary_unary(
                '/flag.v1.JobService/GetStatus',
                request_serializer=flag__pb2.JobId.SerializeToString,
                response_deserializer=flag__pb2.JobStatus.FromString,
                _registered_method=True)
        self.GetResultManifest = channel.unary_unary(
                '/flag.v1.JobService/GetResultManifest',
                request_serializer=flag__pb2.JobId.SerializeToString,
                response_deserializer=flag__pb2.ResultManifestRef.FromString,
                _registered_method=True)
        self.Cancel = channel.unary_unary(
                '/flag.v1.JobService/Cancel',
                request_serializer=flag__pb2.JobId.SerializeToString,
                response_deserializer=flag__pb2.JobStatus.FromString,
                _registered_method=True)


class JobServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Submit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetResultManifest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Cancel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_JobServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Submit': grpc.unary_unary_rpc_method_handler(
                    servicer.Submit,
                    request_deserializer=flag__pb2.SubmitJobRequest.FromString,
                    response_serializer=flag__pb2.JobAck.SerializeToString,
            ),
            'GetStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStatus,
                    request_deserializer=flag__pb2.JobId.FromString,
                    response_serializer=flag__pb2.JobStatus.SerializeToString,
            ),
            'GetResultManifest': grpc.unary_unary_rpc_method_handler(
                    servicer.GetResultManifest,
                    request_deserializer=flag__pb2.JobId.FromString,
                    response_serializer=flag__pb2.ResultManifestRef.SerializeToString,
            ),
            'Cancel': grpc.unary_unary_rpc_method_handler(
                    servicer.Cancel,
                    request_deserializer=flag__pb2.JobId.FromString,
                    response_serializer=flag__pb2.JobStatus.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'flag.v1.JobService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('flag.v1.JobService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class JobService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Submit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/flag.v1.JobService/Submit',
            flag__pb2.SubmitJobRequest.SerializeToString,
            flag__pb2.JobAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/flag.v1.JobService/GetStatus',
            flag__pb2.JobId.SerializeToString,
            flag__pb2.JobStatus.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetResultManifest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/flag.v1.JobService/GetResultManifest',
            flag__pb2.JobId.SerializeToString,
            flag__pb2.ResultManifestRef.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Cancel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/flag.v1.JobService/Cancel',
            flag__pb2.JobId.SerializeToString,
            flag__pb2.JobStatus.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
